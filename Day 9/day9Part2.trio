id:@p:ajTest:r:2b384590-c11ee991 "day9Part2"
name:day9Part2
func
mod:2022-12-23T15:34:41.859Z
src:
  (uri) => do
    moves: uri.ioReadLines()
    
    rope: [
      {x:0, y:0},
      {x:0, y:0},
      {x:0, y:0},
      {x:0, y:0},
      {x:0, y:0},
      {x:0, y:0},
      {x:0, y:0},
      {x:0, y:0},
      {x:0, y:0},
      {x:0, y:0}
     ]
    
    tailPositions:[]
  
    //func to return new position of tail given current position and updated head position
    follow: (tail, head) => do
      delta: {x:tail->x - head->x, y: tail->y - head->y} //relative position of the tail to the head
      
      //diagonal up/right
      if ((delta->x <= -1 and delta->y == 2) or (delta->x == -2 and delta->y == 1))
        return {x: tail->x + 1, y: tail->y - 1}
      //diagonal down/right
      else if ((delta->x <= -1 and delta->y == -2) or (delta->x == -2 and delta->y == -1))
        return {x: tail->x + 1, y: tail->y + 1}
      //diagonal down/left
      else if ((delta->x >= 1 and delta->y == -2) or (delta->x == 2 and delta->y == -1))
        return {x: tail->x - 1, y: tail->y + 1}
      //diagonal up/left
      else if ((delta->x >= 1 and delta->y == 2) or (delta->x == 2 and delta->y == 1))
        return {x: tail->x - 1, y: tail->y - 1}
      //right
      else if (delta->x < -1)
        return {x: tail->x + 1, y: tail->y}
      //left
      else if (delta->x > 1)
        return {x: tail->x - 1, y: tail->y}
      //down
      else if (delta->y < -1)
        return {x: tail->x, y: tail->y + 1}
      //up
      else if (delta->y > 1)
        return {x: tail->x, y: tail->y - 1}
      //no change
      else
        return tail
    end
    
    //do moves
    moves.each(move => do
      parts: move.split(" ")
      direction: parts[0]
      count: parts[1].parseNumber()
      
      count.times(i => do
        head: rope[0]
        
        if (direction == "D") 
          head = {x:head->x, y:head->y + 1}
        else if (direction == "U") 
          head = {x:head->x, y:head->y - 1}
        else if (direction == "L") 
          head = {x:head->x - 1, y:head->y}
        else if (direction == "R") 
          head = {x:head->x + 1, y:head->y}
        
        rope = rope.remove(0).insert(0, head)
        
        rope.each((knot, i) => do
          if (i > 0) do
            knot = knot.follow(rope[i-1])
            rope = rope.remove(i).insert(i, knot)
          end
        end)
        
        tail: rope[rope.size - 1]
        tailPositions = tailPositions.add(tail) 
      end)
      
    end)
    
    tailPositions
      .map(pos => pos.toStr) //convert to string for equality comparison - raw dicts with same values may have different hashes.
      .unique
      .size
  
  end